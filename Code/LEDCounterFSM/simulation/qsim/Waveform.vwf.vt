// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/29/2015 14:50:43"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LEDCounterFSM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LEDCounterFSM_vlg_sample_tst(
	clk,
	enable,
	reset,
	sampler_tx
);
input  clk;
input  enable;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or enable or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LEDCounterFSM_vlg_check_tst (
	final,
	ledRed0,
	ledRed1,
	ledRed2,
	sampler_rx
);
input  final;
input  ledRed0;
input  ledRed1;
input  ledRed2;
input sampler_rx;

reg  final_expected;
reg  ledRed0_expected;
reg  ledRed1_expected;
reg  ledRed2_expected;

reg  final_prev;
reg  ledRed0_prev;
reg  ledRed1_prev;
reg  ledRed2_prev;

reg  final_expected_prev;
reg  ledRed0_expected_prev;
reg  ledRed1_expected_prev;
reg  ledRed2_expected_prev;

reg  last_final_exp;
reg  last_ledRed0_exp;
reg  last_ledRed1_exp;
reg  last_ledRed2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	final_prev = final;
	ledRed0_prev = ledRed0;
	ledRed1_prev = ledRed1;
	ledRed2_prev = ledRed2;
end

// update expected /o prevs

always @(trigger)
begin
	final_expected_prev = final_expected;
	ledRed0_expected_prev = ledRed0_expected;
	ledRed1_expected_prev = ledRed1_expected;
	ledRed2_expected_prev = ledRed2_expected;
end



// expected final
initial
begin
	final_expected = 1'bX;
end 

// expected ledRed0
initial
begin
	ledRed0_expected = 1'bX;
end 

// expected ledRed1
initial
begin
	ledRed1_expected = 1'bX;
end 

// expected ledRed2
initial
begin
	ledRed2_expected = 1'bX;
end 
// generate trigger
always @(final_expected or final or ledRed0_expected or ledRed0 or ledRed1_expected or ledRed1 or ledRed2_expected or ledRed2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected final = %b | expected ledRed0 = %b | expected ledRed1 = %b | expected ledRed2 = %b | ",final_expected_prev,ledRed0_expected_prev,ledRed1_expected_prev,ledRed2_expected_prev);
	$display("| real final = %b | real ledRed0 = %b | real ledRed1 = %b | real ledRed2 = %b | ",final_prev,ledRed0_prev,ledRed1_prev,ledRed2_prev);
`endif
	if (
		( final_expected_prev !== 1'bx ) && ( final_prev !== final_expected_prev )
		&& ((final_expected_prev !== last_final_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port final :: @time = %t",  $realtime);
		$display ("     Expected value = %b", final_expected_prev);
		$display ("     Real value = %b", final_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_final_exp = final_expected_prev;
	end
	if (
		( ledRed0_expected_prev !== 1'bx ) && ( ledRed0_prev !== ledRed0_expected_prev )
		&& ((ledRed0_expected_prev !== last_ledRed0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledRed0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledRed0_expected_prev);
		$display ("     Real value = %b", ledRed0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ledRed0_exp = ledRed0_expected_prev;
	end
	if (
		( ledRed1_expected_prev !== 1'bx ) && ( ledRed1_prev !== ledRed1_expected_prev )
		&& ((ledRed1_expected_prev !== last_ledRed1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledRed1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledRed1_expected_prev);
		$display ("     Real value = %b", ledRed1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ledRed1_exp = ledRed1_expected_prev;
	end
	if (
		( ledRed2_expected_prev !== 1'bx ) && ( ledRed2_prev !== ledRed2_expected_prev )
		&& ((ledRed2_expected_prev !== last_ledRed2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledRed2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledRed2_expected_prev);
		$display ("     Real value = %b", ledRed2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ledRed2_exp = ledRed2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LEDCounterFSM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enable;
reg reset;
// wires                                               
wire final;
wire ledRed0;
wire ledRed1;
wire ledRed2;

wire sampler;                             

// assign statements (if any)                          
LEDCounterFSM i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enable(enable),
	.\final (final),
	.ledRed0(ledRed0),
	.ledRed1(ledRed1),
	.ledRed2(ledRed2),
	.reset(reset)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #60000 1'b1;
	enable = #40000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #380000 1'b1;
	reset = #100000 1'b0;
end 

LEDCounterFSM_vlg_sample_tst tb_sample (
	.clk(clk),
	.enable(enable),
	.reset(reset),
	.sampler_tx(sampler)
);

LEDCounterFSM_vlg_check_tst tb_out(
	.final(final),
	.ledRed0(ledRed0),
	.ledRed1(ledRed1),
	.ledRed2(ledRed2),
	.sampler_rx(sampler)
);
endmodule

